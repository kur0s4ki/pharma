/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Prescription as PrismaPrescription } from "@prisma/client";

export class PrescriptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PrescriptionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.prescription.count(args);
  }

  async prescriptions(
    args: Prisma.PrescriptionFindManyArgs
  ): Promise<PrismaPrescription[]> {
    return this.prisma.prescription.findMany(args);
  }
  async prescription(
    args: Prisma.PrescriptionFindUniqueArgs
  ): Promise<PrismaPrescription | null> {
    return this.prisma.prescription.findUnique(args);
  }
  async createPrescription(
    args: Prisma.PrescriptionCreateArgs
  ): Promise<PrismaPrescription> {
    return this.prisma.prescription.create(args);
  }
  async updatePrescription(
    args: Prisma.PrescriptionUpdateArgs
  ): Promise<PrismaPrescription> {
    return this.prisma.prescription.update(args);
  }
  async deletePrescription(
    args: Prisma.PrescriptionDeleteArgs
  ): Promise<PrismaPrescription> {
    return this.prisma.prescription.delete(args);
  }
}
