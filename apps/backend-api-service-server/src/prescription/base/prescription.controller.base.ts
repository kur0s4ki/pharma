/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PrescriptionService } from "../prescription.service";
import { PrescriptionCreateInput } from "./PrescriptionCreateInput";
import { Prescription } from "./Prescription";
import { PrescriptionFindManyArgs } from "./PrescriptionFindManyArgs";
import { PrescriptionWhereUniqueInput } from "./PrescriptionWhereUniqueInput";
import { PrescriptionUpdateInput } from "./PrescriptionUpdateInput";

export class PrescriptionControllerBase {
  constructor(protected readonly service: PrescriptionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Prescription })
  async createPrescription(
    @common.Body() data: PrescriptionCreateInput
  ): Promise<Prescription> {
    return await this.service.createPrescription({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Prescription] })
  @ApiNestedQuery(PrescriptionFindManyArgs)
  async prescriptions(@common.Req() request: Request): Promise<Prescription[]> {
    const args = plainToClass(PrescriptionFindManyArgs, request.query);
    return this.service.prescriptions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Prescription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async prescription(
    @common.Param() params: PrescriptionWhereUniqueInput
  ): Promise<Prescription | null> {
    const result = await this.service.prescription({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Prescription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePrescription(
    @common.Param() params: PrescriptionWhereUniqueInput,
    @common.Body() data: PrescriptionUpdateInput
  ): Promise<Prescription | null> {
    try {
      return await this.service.updatePrescription({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Prescription })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePrescription(
    @common.Param() params: PrescriptionWhereUniqueInput
  ): Promise<Prescription | null> {
    try {
      return await this.service.deletePrescription({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
