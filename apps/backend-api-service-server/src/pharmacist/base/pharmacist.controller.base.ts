/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PharmacistService } from "../pharmacist.service";
import { PharmacistCreateInput } from "./PharmacistCreateInput";
import { Pharmacist } from "./Pharmacist";
import { PharmacistFindManyArgs } from "./PharmacistFindManyArgs";
import { PharmacistWhereUniqueInput } from "./PharmacistWhereUniqueInput";
import { PharmacistUpdateInput } from "./PharmacistUpdateInput";

export class PharmacistControllerBase {
  constructor(protected readonly service: PharmacistService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Pharmacist })
  async createPharmacist(
    @common.Body() data: PharmacistCreateInput
  ): Promise<Pharmacist> {
    return await this.service.createPharmacist({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Pharmacist] })
  @ApiNestedQuery(PharmacistFindManyArgs)
  async pharmacists(@common.Req() request: Request): Promise<Pharmacist[]> {
    const args = plainToClass(PharmacistFindManyArgs, request.query);
    return this.service.pharmacists({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Pharmacist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pharmacist(
    @common.Param() params: PharmacistWhereUniqueInput
  ): Promise<Pharmacist | null> {
    const result = await this.service.pharmacist({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Pharmacist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePharmacist(
    @common.Param() params: PharmacistWhereUniqueInput,
    @common.Body() data: PharmacistUpdateInput
  ): Promise<Pharmacist | null> {
    try {
      return await this.service.updatePharmacist({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Pharmacist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePharmacist(
    @common.Param() params: PharmacistWhereUniqueInput
  ): Promise<Pharmacist | null> {
    try {
      return await this.service.deletePharmacist({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
